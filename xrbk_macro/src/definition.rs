// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

mod expansion;
mod parsing;

use syn::{
	braced,
	parenthesized,
	token,
	Attribute,
	Error,
	Expr,
	Generics,
	Ident,
	Result,
	Token,
	Type,
	Visibility,
};

use syn::punctuated::Punctuated;

use crate::element::Content;

pub struct Definitions<'a>(Vec<Definition<'a>>);

/// A definition within the `define!` macro.
pub enum Definition<'a> {
	Structlike(Metadata, Content<'a>, Option<Token![;]>),
	Enum(Enum<'a>),

	/// Any other item allowed in Rust that isn't a struct nor an enum.
	Other(syn::Item),
}

/// Metadata associated with a [`Structlike` `Definition`].
///
/// [`Structlike` `Definition`]: Definition::Structlike
pub enum Metadata {
	Struct(Box<Struct>),

	Request(Box<Request>),
	Reply(Box<Reply>),
	Event(Box<Event>),
}

/// Metadata for a struct.
pub struct Struct {
	/// Attributes associated with the struct, including doc comments.
	pub attributes: Vec<Attribute>,

	/// The visibility of the struct.
	pub visibility: Visibility,
	/// The struct token: `struct`.
	pub struct_token: Token![struct],
	/// The name of the struct.
	pub ident: Ident,
	/// Generics (lifetimes and./or generic types) associated with the struct.
	pub generics: Generics,
}

/// Metadata for a request struct.
pub struct Request {
	/// Attributes associated with the request's struct, including doc comments.
	pub attributes: Vec<Attribute>,

	/// The visibility of the request's struct.
	pub visibility: Visibility,
	/// The struct token: `struct`.
	pub struct_token: Token![struct],
	/// The name of the request.
	pub ident: Ident,
	/// Generics (lifetimes and/or generic types) associated with the request's
	/// struct.
	pub generics: Generics,

	/// A colon token: `:`.
	pub colon_token: Token![:],
	/// Specifies that this is a request: `Request`.
	pub request_token: Ident,

	/// A pair of normal brackets surrounding the opcodes: `(` and `)`.
	pub paren_token: token::Paren,
	/// An expression that evaluates to the major opcode associated with the
	/// request.
	pub major_opcode: Expr,
	/// An optional comma then expression that evaluates to the minor opcode
	/// associated with the request.
	pub minor_opcode: Option<(Token![,], Expr)>,

	/// An optional arrow followed by a type representing replies generated by
	/// the request.
	pub reply: Option<(Token![->], Type)>,
}

/// Metadata for a reply struct.
pub struct Reply {
	/// Attributes associated with the reply's struct.
	pub attributes: Vec<Attribute>,

	/// The visibility of the reply's struct.
	pub visibility: Visibility,
	/// The struct token: `struct`.
	pub struct_token: Token![struct],
	/// The name of the reply.
	pub ident: Ident,
	/// Generics (lifetimes and/or generic types) associated with the reply's
	/// struct.
	pub generics: Generics,

	/// A colon token: `:`.
	pub colon_token: Token![:],
	/// Specifies that this is a reply: `Reply`.
	pub reply_token: Ident,

	/// A for token: `for`.
	pub for_token: Token![for],
	/// The type of request that generates this reply.
	pub request: Type,
}

/// Metadata for an event struct.
pub struct Event {
	/// Attributes associated with the event's struct, including doc comments.
	pub attributes: Vec<Attribute>,

	/// The visibility of the event's struct.
	pub visibility: Visibility,
	/// The struct token: `struct`.
	pub struct_token: Token![struct],
	/// The name of the event.
	pub ident: Ident,
	/// Generics (lifetimes and/or generic types) associated with the event's
	/// struct.
	pub generics: Generics,

	/// A colon token: `:`.
	pub colon_token: Token![:],
	/// Specifies that this is an event: `Event`.
	pub event_token: Ident,

	/// A pair of normal brackets: `(` and `)`.
	pub paren_token: token::Paren,
	/// An expression that evaluates to the code associated with the event.
	pub code: Expr,
}

/// An enum definition that contains [`Variant`]s which may contain [`Items`].
pub struct Enum<'a> {
	/// Attributes associated with the enum.
	pub attributes: Vec<Attribute>,

	/// The visibility of the enum.
	pub visibility: Visibility,
	/// The enum token: `enum`.
	pub enum_token: Token![enum],
	/// The name of the enum.
	pub ident: Ident,
	/// Generics (lifetimes and/or generic types) associated with the enum.
	pub generics: Generics,

	/// A pair of curly brackets (`{` and `}`) surrounding the enum `variants`.
	pub brace_token: token::Brace,
	/// A list of the enum's [`Variant`]s, punctuated by commas.
	pub variants: Punctuated<Variant<'a>, Token![,]>,
}

/// An [`Enum`] variant that may contain [`Items`].
pub struct Variant<'a> {
	/// Attributes associated with the enum variant.
	pub attributes: Vec<Attribute>,

	/// The name of the enum variant.
	pub ident: Ident,
	/// [`Content`] associated with the enum variant.
	pub content: Content<'a>,

	/// An optional discriminant expression for the enum variant.
	pub discriminant: Option<(Token![=], Expr)>,
}
