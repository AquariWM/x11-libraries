# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Runs checks, tests, code analysis, auto-formats code, applies recommended
# fixes, and publishes documentation.
name: Continuous integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  cancel-runs:
    runs-on: ubuntu-latest

    steps:
      # If this workflow is already in progress or queued, we cancel it; we are
      # about to do the exact same tests and documentation on potentially new
      # code, so it is pointless to continue them.
      - name: Cancel existing workflow runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

  # Runs unit tests.
  run-tests:
    runs-on: ubuntu-latest

    steps:
      # Check out (a.k.a. clones) the XRB repository.
      - name: Checkout XRB
        uses: actions/checkout@v3

      # Install the latest nightly release of the Rust toolchain.
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      # Run unit tests with `cargo test`.
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --color always

  # Automatically applies suggested fixes from `clippy`.
  clippy-fixes:
    runs-on: ubuntu-latest
    needs: cancel-runs

    outputs:
      # The ID of the commit made for the fixes, or, if no fixes were applied,
      # the commit that triggered the workflow.
      commit-id: ${{ steps.commit-id.outputs.commit-id }}

    steps:
      # Check out (a.k.a. clones) the XRB repository.
      - name: Checkout XRB
        uses: actions/checkout@v3

      # Install the latest nightly release of the Rust toolchain.
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy

      - name: Configure git credentials
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      # Apply fixes with `clippy`.
      - name: Apply recommended fixes
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --fix --color always

      - name: Commit changes
        # Commit changes, or, if that fails, do nothing.
        run: |
          git pull
          git commit -am "Applied recommended fixes ${{ github.run_number }}" || :

      # This sets the `commit-id` to the latest commit. If there were changes
      # made, that means it will be the commit for those changes, otherwise it
      # will be the commit that triggered the workflow.
      - name: Set the `commit-id` output
        id: commit-id
        run: echo ::set-output name=commit-id::$(git log --format="%H" -n 1)

      - name: Push changes
        run: git push

  # Automatically formats the code with `rustfmt`.
  auto-format:
    runs-on: ubuntu-latest
    needs: clippy-fixes

    outputs:
      # The ID of the commit made for the automatic formatting, or, if no
      # formatting was done, the commit made for clippy fixes, or, if no fixes
      # were made, the commit that triggered the workflow.
      commit-id: ${{ steps.commit-id.outputs.commit-id }}

    steps:
      # Check out (a.k.a. clones) the XRB repository with fixes made by `clippy`
      # in `clippy-fixes`, if any.
      - name: Checkout XRB
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.clippy-fixes.outputs.commit-id }}

      # Install the latest nightly release of the Rust toolchain.
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Configure git credentials
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      # Automatically format the code with `rustfmt`.
      - name: Format code with `rustfmt`
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all

      - name: Commit changes
        # Commit changes, or, if that fails, do nothing.
        run: |
          git pull
          git commit -am "Formatted code with rustfmt ${{ github.run_number }}" || :

      # This sets the `commit-id` to the latest commit. If there were changes
      # made, that means it will be the commit for those changes, otherwise it
      # will be the commit that triggered the workflow.
      - name: Set the `commit-id` output
        id: commit-id
        run: echo ::set-output name=commit-id::$(git log --format="%H" -n 1)

      - name: Push changes
        run: git push

  # Analyses the code with `clippy`.
  clippy-analyse:
    runs-on: ubuntu-latest
    # We run clippy analysis after any fixes that can be applied have been.
    needs: clippy-fixes

    steps:
      # Check out (a.k.a. clones) the XRB repository with fixes made by `clippy`
      # in `clippy-fixes`, if any.
      - name: Checkout XRB
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.clippy-fixes.outputs.commit-id }}

      # Install the latest nightly release of the Rust toolchain.
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy

      # Analyse the code with `clippy`.
      - name: Clippy analysis
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --clippy --workspace --color always

  # Generate the docs with rustdoc.
  build-docs:
    runs-on: ubuntu-latest
    # We only build the documentation after the code has been changed so that
    # the code sources linked in the documentation are up-to-date.
    needs: [run-tests, auto-format]

    steps:
      # Check out (a.k.a. clones) the XRB repository with fixes made by `clippy`
      # in `clippy-fixes`, if any, and formatting made by `rustfmt` in
      # `auto-format`, if any.
      - name: Checkout XRB
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.auto-format.outputs.commit-id }}
          path: xrb

      # Check out a template to put the generated docs in.
      - name: Checkout XRB docs template
        uses: actions/checkout@v3
        with:
          repository: XdotRS/xrb-docs-template
          path: template

      # Install the Rust toolchain so that docs can be generated.
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      # Setup GitHub Pages to easily deploy to it.
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v2

      # Build documentation with `rustdoc`.
      - name: Build documentation
        working-directory: xrb
        run: cargo doc --no-deps --workspace --document-private-items

      # Place the built documentation into the template, ready to be deployed.
      - name: Move generated docs into docs template
        run: mv xrb/target/doc template/doc

      # Upload the template, now containing the built docs, as an artifact that
      # can be accessed by the `deploy-docs` job.
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: template

  # Deploy the documentation with GitHub Pages.
  deploy-docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    # Can't deploy the documentation until it exists!
    needs: build-docs

    steps:
      # Deploys the documentation to GitHub Pages using the artifact (stored
      # but not committed changes for Actions) saved earlier.
      - name: Deploy documentation to GitHub Pages
        uses: actions/deploy-pages@v1
