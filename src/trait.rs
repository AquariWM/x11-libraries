// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

/// A message sent from an X client to the X server.
#[doc(notable_trait)]
pub trait Request {
	/// The type of [`Reply`] generated by this `Request`.
	///
	/// For `Request`s which do not generate a [reply], this is `()`.
	///
	/// [reply]: Reply
	type Reply;

	/// The major opcode that uniquely identifies this `Request` or extension.
	///
	/// X core protocol `Request`s have unique major opcodes, but each extension
	/// is only assigned one major opcode. Extensions are assigned major opcodes
	/// from 127 through to 255.
	fn major_opcode() -> u8;

	/// The minor opcode that uniquely identifies this `Request` within its
	/// extension.
	///
	/// As each extension is only assigned one major opcode, the minor opcode
	/// can be used to distinguish different `Request`s contained within an
	/// extension.
	///
	/// [`Some`] means that there is indeed a minor opcode associated with this
	/// `Request`. This `Request` is therefore from an extension.
	///
	/// [`None`] means that either this request is not from an extension, or the
	/// extension does not make use of the minor opcode, likely because it only
	/// has one request.
	fn minor_opcode() -> Option<u8>;

	/// The length of this `Request`, including the header, in 4-byte units.
	///
	/// Every `Request` contains a header which is 4 bytes long. This header is
	/// included in the length, so the minimum length is 1 unit (4 bytes). Since
	/// the length is always in multiples of 4 bytes, padding bytes may need to
	/// be added to the end of the `Request` to ensure its length is a multiple
	/// of 4 bytes.
	fn length(&self) -> u16;
}

/// A message sent from the X server to an X client in response to a
/// [`Request`].
#[doc(notable_trait)]
pub trait Reply
where
	Self: Sized,
{
	/// The [request] that generates this `Reply`.
	///
	/// The type indicated here must implement [`Request`] with a
	/// [`Request::Reply`] associated type set to this `Reply`.
	///
	/// [request]: Request
	type Request: Request<Reply = Self>;

	/// The length of this `Reply` in 4-byte units minus 8.
	///
	/// Every `Reply` always consists of 32 bytes followed by zero or more
	/// additional bytes of data; this method indicates the number of additional
	/// bytes of data within the `Reply`.
	///
	/// |'Actual' length in bytes|`length()`|
	/// |------------------------|----------|
	/// |32                      |0         |
	/// |36                      |1         |
	/// |40                      |2         |
	/// |44                      |3         |
	/// |...                     |...       |
	/// |`32 + 4n`               |`n`       |
	fn length(&self) -> u32;

	/// The sequence number associated with the [request] that generated this
	/// `Reply`.
	///
	/// Every [request] on a given connection is assigned a sequence number when
	/// it is sent, starting with `1`. This sequence number can therefore be
	/// used to keep track of exactly which [request] generated this reply.
	///
	/// [request]: Request
	fn sequence(&self) -> u16;
}

/// A message sent from the X server to an X client.
///
/// `Event`s differ from [replies] in that they are not a direct response to a
/// [request] sent by the client receiving them.
///
/// [replies]: Reply
/// [request]: Request
#[doc(notable_trait)]
pub trait Event
where
	Self: Sized,
{
	/// The code uniquely identifying this `Event`.
	fn code() -> u8;

	/// The sequence number associated with the last [request] received that
	/// was related to this `Event`.
	///
	/// [request]: Request
	fn sequence(&self) -> Option<u16>;
}
