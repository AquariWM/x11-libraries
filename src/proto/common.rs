// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

/// A unique ID referring to a [Window], [Pixmap], [Cursor], [Font], [GContext], or [Colormap].
///
/// A [ResId] must be unique in terms of other [ResId]s, but it may have the same value as another
/// type of ID, such as an [Atom] or [VisualId]. Which type of ID a particular number corresponds
/// to is assumed from context.
///
/// The top three bits of a [ResId] are guaranteed to be zero.
pub type ResId = u32;

pub type Window = ResId;
pub type Pixmap = ResId;
pub type Cursor = ResId;
pub type Font = ResId;
pub type GContext = ResId;
pub type Colormap = ResId;
pub type Drawable = ResId; // TODO: A [Drawable] is specifically a [Window] or [Pixmap] - trait or?
pub type Fontable = ResId; // TODO: A [Fontable] is specifically a [Font] or [GContext] - trait or?

/// A unique ID corresponding to a [String] name registered with the X server.
///
/// [Atom]s are used to identify properties, types, and selections.
pub type Atom = u32;
/// [u32].
pub type VisualId = u32;
/// A timestamp expressed in milliseconds, typically the time since the last server reset.
///
/// [Timestamp]s wrap around after about 49.7 days.
///
/// The X server always interprets timestamps from clients by treating half of the timestamp space
/// as earlier than the current time and half of the timestamp space as later than the current
/// time. The [CurrentTime] is never generated by the server, but it is reserved for use in
/// requests to represent the current server time.
pub type Timestamp = u32;

/// The encoding of a particular key irrespective of its location or whether the keyboard includes
/// it.
///
/// A [KeySym] can represent any possible key that could be pressed on any keyboard. It does not
/// necessarily correspond to the keys present on the particular keyboard being used, nor their
/// location.
///
/// The most significant bit (`0x10000000`) is reserved for vendor-specific [KeySym]s.
pub type KeySym = u32;
/// The encoding of a particular key actually present on the keyboard.
///
/// Does not represent the value of the key; i.e., the [KeyCode] will not indicate that the key
/// directly corresponds to the letter `a`, for example. [KeyCode]s are translated to [KeySym]s,
/// which do correspond to the actual keys pressed, with the help of a keymap.
///
/// `8 <= KeyCode <= 255`
pub type KeyCode = u8;
/// A button on the mouse, starting at 1.
///
/// Button 1 typically corresponds to the primary mouse button, button 2 to the middle mouse
/// button, and button 3 to the secondary mouse button.
pub type Button = u8;

/// Represents a two-byte character in a [UTF-16 string](String16).
pub type Char2b = (u8, u8);
/// A UTF-16 encoded string, represented as an array of [two-byte characters](Char2b).
pub type String16<'a> = &'a [Char2b];

/// Represents a point in 2D space; 2D coordinates. `(x: i16, y: i16)`.
pub type Point = (i16, i16);

/// A rectangle with `x`,`y` coordinates and `width` by `height` dimensions.
pub struct Rect {
	pub x: i16,
	pub y: i16,
	pub width: u16,
	pub height: u16,
}

/// Represents the arc of a circle.
///
/// The [Arc] is represented by a slice of a circle at `x`,`y` with the specified `width` and
/// `height`. The start and end angles are given by `start_angle` and `end_angle`.
pub struct Arc {
	pub x: i16,
	pub y: i16,
	pub width: u16,
	pub height: u16,
	pub start_angle: i16,
	pub end_angle: i16,
}

/// The protocol used to connection to a particular [Host].
pub enum Protocol {
	/// IPv4.
	Internet,
	/// DEC-Net.
	DecNet,
	Chaos,
	/// The protocol is interpreted by the server based on the address.
	ServerInterpreted = 5,
	/// IPv6.
	InternetV6,
}

/// An X server host address with a [Protocol] family and the address itself.
pub struct Host {
	/// The protocol used to connect to this [Host].
	pub family: Protocol,
	pub address: String,
}

/// If the contents of a window should be kept when it is resized and where they should be placed.
///
/// When a window is resized, the rendered contents of the window are not necessarily discarded. It
/// is possible to request that the X server repositions the existing window contents to a
/// particular anchor point within the window. This anchor point is called the [BitGravity].
#[derive(Clone, Copy)]
pub enum BitGravity {
	/// Discard the contents of the window.
	Forget,
	/// Position the existing contents of the window at the top-left of the window when resizing.
	NorthWest,
	/// Position the existing contents of the window at the top of the window when resizing.
	North,
	/// Position the existing contents of the window at the top-right of the window when resizing.
	NorthEast,
	/// Position the existing contents of the window at the left of the window when resizing.
	West,
	/// Position the existing contents of the window at the center of the window when resizing.
	Center,
	/// Position the existing contents of the window at the right of the window when resizing.
	East,
	/// Position the existing contents of the window at the bottom-left of the window when
	/// resizing.
	SouthWest,
	/// Position the existing contents of the window at the bottom of the window when resizing.
	South,
	/// Position the existing contents of the window at the bottom-right of the window when
	/// resizing.
	SouthEast,
	/// Retain the existing contents of the window but don't reposition them.
	Static,
}

/// What to do with children of a window when that window is resized.
#[derive(Clone, Copy)]
pub enum WinGravity {
	/// Unmap children of the window.
	Unmap,
	/// Anchor children of the window to the top-left of the window.
	NorthWest,
	/// Anchor children of the window to the top of the window.
	North,
	/// Anchor children of the window to the top-right of the window.
	NorthEast,
	/// Anchor children of the window to the left of the window.
	West,
	/// Anchor children of the window to the center of the window.
	Center,
	/// Anchor children of the window to the right of the window.
	East,
	/// Anchor children of the window to the bottom-left of the window.
	SouthWest,
	/// Anchor children of the window to the bottom of the window.
	South,
	/// Anchor children of the window to the bottom-right of the window.
	SouthEast,
	/// Retain the existing positions of the children of the window.
	Static,
}
